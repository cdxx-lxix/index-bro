<nav class="bg-gray-700 px-1 lg:px-1 py-2.5">
  <div class="flex flex-wrap justify-between items-center mx-2 max-w-screen-xl">
    <ol
      class="inline-flex items-center space-x-1 md:space-x-2 rtl:space-x-reverse"
    >
      <%- include('../elements/ActionButton', { button_id: "uploadbtn", button_name: "UPLOAD", button_icon: `
      <path
        d="m19.707 9.293-2-2-7-7a1 1 0 0 0-1.414 0l-7 7-2 2a1 1 0 0 0 1.414 1.414L2 10.414V18a2 2 0 0 0 2 2h3a1 1 0 0 0 1-1v-4a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v4a1 1 0 0 0 1 1h3a2 2 0 0 0 2-2v-7.586l.293.293a1 1 0 0 0 1.414-1.414Z"
      />`}); %>
      <%- include('../elements/ActionButton', { button_id: "newfolderbtn", button_name: "NEW FOLDER", button_icon: `
      <path
        d="m19.707 9.293-2-2-7-7a1 1 0 0 0-1.414 0l-7 7-2 2a1 1 0 0 0 1.414 1.414L2 10.414V18a2 2 0 0 0 2 2h3a1 1 0 0 0 1-1v-4a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v4a1 1 0 0 0 1 1h3a2 2 0 0 0 2-2v-7.586l.293.293a1 1 0 0 0 1.414-1.414Z"
      />`}); %>
      <%- include('../elements/ActionButton', { button_id: "selectbtn", button_name: "SELECT", button_icon: `
      <path
        d="m19.707 9.293-2-2-7-7a1 1 0 0 0-1.414 0l-7 7-2 2a1 1 0 0 0 1.414 1.414L2 10.414V18a2 2 0 0 0 2 2h3a1 1 0 0 0 1-1v-4a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v4a1 1 0 0 0 1 1h3a2 2 0 0 0 2-2v-7.586l.293.293a1 1 0 0 0 1.414-1.414Z"
      />`}); %>
      <%- include('../elements/ActionButton', { button_id: "deletebtn", button_name: "DELETE", button_icon: `
      <path
        d="m19.707 9.293-2-2-7-7a1 1 0 0 0-1.414 0l-7 7-2 2a1 1 0 0 0 1.414 1.414L2 10.414V18a2 2 0 0 0 2 2h3a1 1 0 0 0 1-1v-4a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v4a1 1 0 0 0 1 1h3a2 2 0 0 0 2-2v-7.586l.293.293a1 1 0 0 0 1.414-1.414Z"
      />`}); %>
    </ol>
  </div>
</nav>

  <!-- Main modal -->
  <div id="upload-modal" data-modal-backdrop="static" tabindex="-1" aria-hidden="true" class="hidden overflow-y-auto overflow-x-hidden fixed top-0 right-0 left-0 z-50 justify-center items-center w-full md:inset-0 h-[calc(100%-1rem)] max-h-full">
    <div class="relative p-4 w-full max-w-2xl max-h-full">
        <!-- Modal content -->
        <div class="relative bg-white rounded-lg shadow">
            <!-- Modal header -->
            <div class="flex items-center justify-between p-4 md:p-5 border-b rounded-t">
                <h3 class="text-xl font-semibold text-gray-900">
                    Upload new files
                </h3>
                <button id="upload-modal-close" type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center" data-modal-hide="upload-modal">
                    <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
                    </svg>
                    <span class="sr-only">Close modal</span>
                </button>
            </div>
            <!-- Modal body -->
            <form id="upload-form" method="POST" enctype="multipart/form-data" action="/upload" class="p-4">
              <div class="flex items-center justify-center w-full">
                <label for="files" class="flex flex-col items-center justify-center w-full h-64 border-2 border-gray-300 border-dashed cursor-pointer bg-gray-50">
                    <div class="flex flex-col items-center justify-center pt-5 pb-6">
                        <svg class="w-8 h-8 mb-4 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 16">
                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 13h3a3 3 0 0 0 0-6h-.025A5.56 5.56 0 0 0 16 6.5 5.5 5.5 0 0 0 5.207 5.021C5.137 5.017 5.071 5 5 5a4 4 0 0 0 0 8h2.167M10 15V6m0 0L8 8m2-2 2 2"/>
                        </svg>
                        <p class="mb-2 text-sm text-gray-500 dark:text-gray-400"><span class="font-semibold">Click to upload</span> or drag and drop</p>
                    </div>
                    <input type="file" name="files" id="files" multiple class="hidden" />
                    <input type="hidden" id="dir" name="dir" value="<%= currentPath %>">
                </label>
              </div>
              <div class="flex items-center justify-center p-4 md:p-5">
                <input type="submit" value="Upload" class="text-white cursor-pointer bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center" />
                <span id="files-uploaded" class="ms-3 text-gray-500 bg-white rounded-lg border border-gray-200 text-sm font-medium px-5 py-2.5"></span>
              </div>
            </form>
        </div>
    </div>
  </div>

<script>
 const uploadbtn = document.getElementById("uploadbtn")
 const uploadmodal = document.getElementById("upload-modal")
 const uploadmodalclose = document.getElementById("upload-modal-close")
 const filesAmount = document.getElementById("files")
 const filesuploaded = document.getElementById("files-uploaded")

 // Function to update filesuploaded.innerText
 function updateFilesUploaded() {
  filesuploaded.innerText = `Files selected: ${filesAmount.files.length}`
 }

 uploadbtn.addEventListener("click", (e) => {
  uploadmodal.classList.remove("hidden")
  uploadmodal.classList.add("flex")
  filesAmount.value = ''
  updateFilesUploaded() // Call function when modal is opened
 })

 uploadmodalclose.addEventListener("click", (e) => {
  uploadmodal.classList.remove("flex")
  uploadmodal.classList.add("hidden")
  filesAmount.value = ''
  updateFilesUploaded() // Call function when modal is closed
 })

 // Add event listener to filesAmount
 filesAmount.addEventListener('input', (e) => {
  updateFilesUploaded() // Call function when filesAmount value changes
 })
 const stringToHex = (str) => {
  let hex = '';
  for (let i = 0; i < str.length; i++) {
    const charCode = str.charCodeAt(i);
    const hexValue = charCode.toString(16);

    // Pad with zeros to ensure two-digit representation
    hex += hexValue.padStart(2, '0');
  }
    return hex;
  };
  const form = document.querySelector('form');
  form.addEventListener('submit', (e) => {
      e.preventDefault();
      const files = document.getElementById("files");
      const currentDir = document.getElementById("dir").value;
      let encodedDir = stringToHex(currentDir)
      const formData = new FormData();
      for(let i =0; i < files.files.length; i++) {
          formData.append("files", files.files[i]);
          
      }
      fetch(`http://localhost:3000/upload/${encodedDir}`, {
          method: 'POST',
          body: formData
      })
      .then(res => res.json())
      .then(res => {
        if (res.isUploaded) {
          window.alert(`${files.files.length} file(s) successfully uploaded`)
          res.isUploaded = false
        }
      })
  })
</script>